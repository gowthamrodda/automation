#!/usr/bin/env node

'use strict';

const { name, version } = require('./package.json');
const cli = require('commander');

// GET METHODS to build CLI
function getFunctionParamsNames(fn) {
	// toString()
	let fnString = fn.toString();
	// replace spaces / /
	fnString = fnString.replace(/ /g, '');
	// get firstPart
	fnString = fnString.match(/^(.*?)(?:=>|{)/)[1];
	// remove function name
	fnString = fnString.replace(/function.*?(?:\()/g, '');
	// remove parenthesis
	fnString = fnString.replace(/[\(\)]/g, '');
	// list params
	let listParams = fnString.split(',').filter(v => !!v);
	// remove default params assignments
	listParams = listParams.map(param => param.replace(/=.*/g, ''));
	return listParams;
}

function getMethodsFlat(o, path = '', methods = {}) {
	for (let prop of Object.getOwnPropertyNames(o)) {
		if (o[prop].constructor === Function) {
			let methodCall = path ? `${path}.${prop}` : prop;
			methods[methodCall] = { method: o[prop] };

			let functionParams = getFunctionParamsNames(o[prop]);
			if (functionParams) {
				methods[methodCall] = {
					params: functionParams,
					method: o[prop]
				};
			}
		}
		if (o[prop].constructor === Object) {
			methods = getMethodsFlat(o[prop], path ? `${path}.${prop}` : prop, methods);
		}
	}
	return methods;
}

function main(moduleMethods) {
	if (moduleMethods.constructor === Function) {
		// Module is a Function
		const params = getFunctionParamsNames(moduleMethods);
		params.forEach(param => {
			cli.option(`--${param} [value]`);
		});

		cli.version(version);
		cli.parse(process.argv);

		moduleMethods(...params.map(param => cli[param]));

	} else {
		// Module is a set of methods within an Object Literal
		const methods = getMethodsFlat(moduleMethods);
		Object.keys(methods).forEach(methodKey => {
			let cmd = cli.command(`${methodKey.replace(/\./g, '-')}`);
			methods[methodKey].params.forEach(param => cmd.option(`--${param} [option]`));
			cmd.action(options => {
				let methodReturn = methods[methodKey].method(...methods[methodKey].params.map(param => options[param]));
				if (methodReturn.then) {
					methodReturn.then(console.log).catch(console.log);
				} else {
					console.log(methodReturn);
				}
			});
		});

		cli.version(version);
		cli.usage(`<command> [options]`);
		cli.parse(process.argv);
		if (!process.argv.slice(2).length) {
			cli.outputHelp();
		}
	}
}

module.exports = main;